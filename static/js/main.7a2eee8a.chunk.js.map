{"version":3,"sources":["getWeb3.js","Components/BettingForm.js","Components/Game.js","Components/GamesContainer.js","Components/FundButton.js","Components/NavBar.js","Components/DeactivateButton.js","Components/ActivateButton.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Form","props","onSubmit","name","value","data","amount","onChange","handleChange","placeholder","required","className","type","checked","guess","style","width","Game","id","outcome","randomNumber","bet","data-icon","data-inline","wonTokens","GamesContainer","games","gamesHistory","map","game","key","gid","FundButton","contractBalance","fundOnSubmit","fundAmount","NavBar","backgroundColor","paddingTop","padding","marginBottom","color","accounts","balance","DeactivateButton","deactivateOnSubmit","ActivateButton","activateOnSubmit","App","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","GamblingContract","networks","instance","Contract","abi","address","setState","contract","alert","error","getOwner","contractOwner","getGames","returnValues","toObject","getMyDetails","b","state","utils","fromWei","methods","getBalance","call","cb","online","isOnline","i","length","singleGame","push","getMyGames","from","owner","event","preventDefault","sendTransaction","to","_address","toWei","turnOffline","send","location","reload","turnOnline","bind","this","parseInt","winOrLose","gas","target","test","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a2eee8a.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\"\r\n\r\nfunction Form(props) {\r\n    return (\r\n    <div> \r\n        <h1>Try your Luck!</h1>\r\n        <br />\r\n            <form onSubmit={props.onSubmit}>\r\n            <input\r\n                name=\"amount\"\r\n                value={props.data.amount}\r\n                onChange={props.handleChange}\r\n                placeholder=\"Amount\"\r\n                required\r\n            />\r\n            <br /><br />\r\n            <label className=\"form-label\">\r\n                <input\r\n                    type=\"radio\"\r\n                    name=\"guess\"\r\n                    value='1'\r\n                    checked={props.data.guess === '1'}\r\n                    onChange={props.handleChange}\r\n                    required\r\n                /> Higher\r\n            </label>\r\n            <br />\r\n            <label>\r\n                <input\r\n                    type=\"radio\"\r\n                    name=\"guess\"\r\n                    value='0'\r\n                    checked={props.data.guess === '0'}\r\n                    onChange={props.handleChange}\r\n                /> Lower\r\n            </label>\r\n            <br/><br/>\r\n            <button className=\"btn btn-primary btn-lg\" style={{width:'10%'}}>Bet</button>\r\n            <br/>\r\n        </form>\r\n    <br/><br/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Form","import React from \"react\"\r\n\r\nfunction Game(props){\r\n    return (\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n          <div className=\"card-header\">\r\n            <h5>Game: {props.id}, {props.outcome}</h5>\r\n          </div>\r\n          <ul className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item\">My guess was {props.guess}. The random number was {props.randomNumber} </li>\r\n            <li className=\"list-group-item\">I bet {props.bet} <span className=\"iconify\" data-icon=\"mdi-ethereum\" data-inline=\"false\"></span><b>ETH</b></li>\r\n            <li className=\"list-group-item\">I won {props.wonTokens}<span className=\"iconify\" data-icon=\"mdi-ethereum\" data-inline=\"false\"></span><b>ETH</b> </li>\r\n            \r\n          </ul>\r\n          </div>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport Game from './Game';\r\n\r\n\r\nfunction GamesContainer(props) {\r\n  var gamesHistory = props.data.gamesHistory\r\n\r\n  const games = gamesHistory.map(game => \r\n  <Game \r\n  key = {game.gid}\r\n  id = {game.gid}\r\n  guess = {game.guess==true ? 'greater than 5' : 'less than 5'}\r\n  outcome = {game.outcome==true ? 'Win! 😁🥳🤑' : 'Lose 💩🥶😭'}\r\n  bet = {game.bet}\r\n  wonTokens = {game.outcome==true ? game.wonTokens : 0}\r\n  randomNumber = {game.randomNumber}\r\n  />)\r\n  return (\r\n    <div>\r\n      <h1>Game History</h1>\r\n      {games}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GamesContainer;\r\n","import React from \"react\";\r\n\r\nfunction FundButton(props) {\r\n  return (\r\n    <div>\r\n        <h1>Fund Your Contract</h1>\r\n        The balance of your contract is {props.data.contractBalance} <span className=\"iconify\" data-icon=\"mdi-ethereum\" data-inline=\"false\"></span> <b>ETH</b>\r\n        <br/><br/>\r\n        <form onSubmit={props.fundOnSubmit}>\r\n            <input\r\n                name=\"fundAmount\"\r\n                value={props.data.fundAmount}\r\n                onChange={props.handleChange}\r\n                placeholder=\"Fund\"\r\n            />\r\n            <br /><br />\r\n            <button className=\"btn btn-primary btn-lg\" style={{width:'10%'}}>Fund</button>\r\n        </form>\r\n    </div>\r\n) \r\n}\r\n\r\nexport default FundButton;","import React from \"react\"\r\n\r\n\r\nfunction NavBar(props){\r\n    return(\r\n    <div>\r\n        <ul className=\"nav justify-content-end\" style={{backgroundColor: \"blue\", paddingTop:'1%', padding:'1%', marginBottom:'2%'}}>\r\n            <li className=\"nav-item\" style={{color: \"white\", padding: '1% 1% 1% 1% '}}>\r\n            <strong>Your account address is </strong> {props.data.accounts[0]}\r\n            </li>\r\n            <li className=\"nav-item\" style={{color: \"white\", padding: '1% 1% 1% 1% '}}>\r\n                <strong>Balance:</strong> {props.data.balance} <span className=\"iconify\" data-icon=\"mdi-ethereum\" data-inline=\"false\"></span> <b>ETH</b>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from \"react\";\r\n\r\nfunction DeactivateButton(props) {\r\n  return (\r\n    <div>\r\n        <form onSubmit={props.deactivateOnSubmit}>\r\n            <button className=\"btn btn-danger btn-lg\" style={{width:'15%'}}>Deactivate</button>\r\n        </form>\r\n    </div>\r\n) \r\n}\r\n\r\nexport default DeactivateButton;","import React from \"react\";\r\n\r\nfunction ActivateButton(props) {\r\n  return (\r\n    <div>\r\n        <form onSubmit={props.activateOnSubmit}>\r\n            <button className=\"btn btn-success btn-lg\" style={{width:'15%'}}>Activate</button>\r\n        </form>\r\n    </div>\r\n) \r\n}\r\n\r\nexport default ActivateButton;","import React, { Component } from \"react\";\nimport GamblingContract from \"./contracts/Gambling.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Form from './Components/BettingForm.js'\nimport GamesContainer from './Components/GamesContainer'\nimport FundButton from './Components/FundButton.js'\nimport NavBar from './Components/NavBar.js'\nimport DeactivateButton from './Components/DeactivateButton.js'\nimport ActivateButton from './Components/ActivateButton.js'\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      web3: null,\n      accounts: null,\n      contract: null,\n      guess: false,\n      amount: '',\n      gamesHistory: [],\n      balance: 0,\n      contractBalance: 0,\n      fundAmount: '',\n      isOnline: false\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = GamblingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        GamblingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n\n    // get the owner of the contract in order to decide if funding-form will be rendered\n    var contractOwner = await this.getOwner()\n    console.log(contractOwner)\n    this.setState({contractOwner})\n\n    // get previous games of the user \n    const returnValues = await this.getGames()\n    console.log(\"accounreturnValuests\",returnValues )\n\n    \n    const gamesHistory = this.toObject(returnValues)\n    this.setState({gamesHistory})\n\n    // get my balance (for account[0])\n    const b = await this.getMyDetails()\n    const balance = this.state.web3.utils.fromWei(b, 'ether')\n    console.log(balance)\n    this.setState({balance})\n\n    // get contract's balance\n    const cb = await this.state.contract.methods.getBalance().call()\n    const contractBalance = this.state.web3.utils.fromWei(cb, 'ether')\n    this.setState({contractBalance})\n\n    const isOnline = await this.state.contract.methods.online().call()\n    this.setState({isOnline})\n\n    console.log(this.state)\n  };\n\n  // get the independent arrays that returned from the contract and create json objects \n  toObject = (returnValues)=>{\n    var gamesHistory = []\n    for (let i = returnValues[0].length -1 ; i>=0; i--) {\n      var singleGame = {\n        gid: returnValues[0][i], \n        outcome: returnValues[1][i], \n        guess: returnValues[2][i], \n        bet: this.state.web3.utils.fromWei(returnValues[3][i], 'ether'), \n        wonTokens: this.state.web3.utils.fromWei(returnValues[4][i], 'ether'), \n        randomNumber: returnValues[5][i],\n      };\n      gamesHistory.push(singleGame)\n    }\n    return gamesHistory\n  }\n  \n\n  // get the history of the user's games\n  getGames = async () => {\n    const { contract, accounts } = this.state;\n    return new Promise(async function(resolve){\n      var games = await contract.methods.getMyGames().call({from: accounts[0]})\n      resolve(games)\n    })\n  }\n\n  // get the my balance\n  getMyDetails = async () => {\n    const { web3, accounts } = this.state;\n    \n    return new Promise(function(resolve){\n      var balance =  web3.eth.getBalance(accounts[0]);\n      console.log(balance)\n      resolve(balance)\n    })\n  }\n\n\n  //this submit function refers to the action of betting\n  async onSubmit(event) {\n    event.preventDefault();\n    const { web3, accounts, contract } = this.state;\n    let guess = parseInt(this.state.guess)\n    await contract.methods.winOrLose(guess).send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.amount, \"ether\"),\n      gas: 5000000\n    })\n\n    const returnValues = await this.getGames()\n    const gamesHistory = this.toObject(returnValues)\n    this.setState({gamesHistory})\n\n    // get contract's balance\n    const cb = await this.state.contract.methods.getBalance().call()\n    const contractBalance = this.state.web3.utils.fromWei(cb, 'ether')\n    this.setState({contractBalance})\n  }\n\n  //needed function to handle the forms\n  handleChange(event) {\n    const re = /[0-9]|\\./;\n    const { name, value, type, checked } = event.target\n    if (type === \"checkbox\"){\n      this.setState({\n        [name]: checked\n      })\n    }else{\n      if (event.target.value === '' || re.test(event.target.value)){\n        this.setState({\n          [name]: value\n        })\n      }\n    }\n  }\n\n  //get the owner of the contract\n  getOwner = async () =>{\n    const {contract } = this.state;\n    return new Promise(function(resolve){\n      var ownerAddress = contract.methods.owner().call()\n      resolve(ownerAddress)\n    })\n  }\n\n  //this submit function refers to the action of funding\n  fundOnSubmit = async (event) =>{\n    event.preventDefault()\n    const { web3, accounts, contract } = this.state;\n    \n    web3.eth.sendTransaction({\n      from: accounts[0],\n      to: contract._address,\n      value: web3.utils.toWei(this.state.fundAmount, \"ether\") \n    })\n    // get contract's balance\n    const cb = await this.state.contract.methods.getBalance().call()\n    const contractBalance = this.state.web3.utils.fromWei(cb, 'ether')\n    this.setState({contractBalance})\n  }\n\n  deactivateOnSubmit = async (event) =>{\n    event.preventDefault()\n    const { accounts, contract } = this.state;\n    await contract.methods.turnOffline().send({\n      from: accounts[0]\n    })\n    window.location.reload(); \n  }\n\n  activateOnSubmit = async (event) =>{\n    event.preventDefault()\n    const { accounts, contract } = this.state;\n    await contract.methods.turnOnline().send({\n      from: accounts[0]\n    })\n    window.location.reload(); \n  }\n  \n\n\n  // render the website\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <NavBar data={this.state}/>\n        {this.state.isOnline ? <Form handleChange={this.handleChange} data={this.state} onSubmit={this.onSubmit} />: null }\n        \n        {/* conditional rendering. fund form appears only to the owner */}\n    \n        {this.state.contractOwner == this.state.accounts[0] ? <FundButton data={this.state} fundOnSubmit={this.fundOnSubmit} handleChange={this.handleChange}/> : null }\n        <br/>\n        {this.state.contractOwner == this.state.accounts[0] && this.state.isOnline ? <DeactivateButton deactivateOnSubmit={this.deactivateOnSubmit} /> : null }\n        {this.state.contractOwner == this.state.accounts[0] && !this.state.isOnline ? <ActivateButton activateOnSubmit={this.activateOnSubmit} /> : null  }\n\n        <br></br>\n        <GamesContainer data={this.state} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}